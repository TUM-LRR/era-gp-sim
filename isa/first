 size=3 {
  [0] = {
    __cc = {
      first = "add"
      second = {
        _mnemonic = "add"
        _key = {
          ContainerAdapter<std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > > > = {
            _container = size=2 {
              [0] = {
                __cc = (first = "function", second = 3)
                __nc = (first = "function", second = 3)
              }
              [1] = {
                __cc = (first = "opcode", second = 6)
                __nc = (first = "opcode", second = 6)
              }
            }
          }
        }
      }
    }
    __nc = {
      first = "add"
      second = {
        _mnemonic = "add"
        _key = {
          ContainerAdapter<std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > > > = {
            _container = size=2 {
              [0] = {
                __cc = (first = "function", second = 3)
                __nc = (first = "function", second = 3)
              }
              [1] = {
                __cc = (first = "opcode", second = 6)
                __nc = (first = "opcode", second = 6)
              }
            }
          }
        }
      }
    }
  }
  [1] = {
    __cc = {
      first = "sub"
      second = {
        _mnemonic = "sub"
        _key = {
          ContainerAdapter<std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > > > = {
            _container = size=2 {
              [0] = {
                __cc = (first = "function", second = 3)
                __nc = (first = "function", second = 3)
              }
              [1] = {
                __cc = (first = "opcode", second = 9)
                __nc = (first = "opcode", second = 9)
              }
            }
          }
        }
      }
    }
    __nc = {
      first = "sub"
      second = {
        _mnemonic = "sub"
        _key = {
          ContainerAdapter<std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > > > = {
            _container = size=2 {
              [0] = {
                __cc = (first = "function", second = 3)
                __nc = (first = "function", second = 3)
              }
              [1] = {
                __cc = (first = "opcode", second = 9)
                __nc = (first = "opcode", second = 9)
              }
            }
          }
        }
      }
    }
  }
  [2] = {
    __cc = {
      first = "sll"
      second = {
        _mnemonic = "sll"
        _key = {
          ContainerAdapter<std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > > > = {
            _container = size=3 {
              [0] = {
                __cc = (first = "opcode", second = 6)
                __nc = (first = "opcode", second = 6)
              }
              [1] = {
                __cc = (first = "something", second = 6)
                __nc = (first = "something", second = 6)
              }
              [2] = {
                __cc = (first = "function", second = 6)
                __nc = (first = "function", second = 6)
              }
            }
          }
        }
      }
    }
    __nc = {
      first = "sll"
      second = {
        _mnemonic = "sll"
        _key = {
          ContainerAdapter<std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > > > = {
            _container = size=3 {
              [0] = {
                __cc = (first = "opcode", second = 6)
                __nc = (first = "opcode", second = 6)
              }
              [1] = {
                __cc = (first = "something", second = 6)
                __nc = (first = "something", second = 6)
              }
              [2] = {
                __cc = (first = "function", second = 6)
                __nc = (first = "function", second = 6)
              }
            }
          }
        }
      }
    }
  }
}