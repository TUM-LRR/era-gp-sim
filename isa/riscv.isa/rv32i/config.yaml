# RISC-V: RV32I

name: rv32i

alignment-behavior: relaxed
endianness: little
word-size: 32
byte-size: 8
signed-representation: twos-complement

instructions:
  - mnemonic: simusleep
    length: 32
    format: custom
    operand length:
      - 32
    key:
      opcode: -1
  - mnemonic: simucrash
    length: 32
    format: custom
    key:
      opcode: -1
  - mnemonic: lui
    length: 32
    format: U
    operand length:
      - 0
      - 20
    key:
      opcode: 55
  - mnemonic: auipc
    length: 32
    format: U
    operand length:
      - 0
      - 20
    key:
      opcode: 23
  - mnemonic: jal
    length: 32
    format: UJ
    operand length:
      - 0
      - 20
    key:
      opcode: 111
  - mnemonic: jalr
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 103
      funct3: 0
  - mnemonic: beq
    length: 32
    format: SB
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 99
      funct3: 0
  - mnemonic: bne
    length: 32
    format: SB
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 99
      funct3: 1
  - mnemonic: blt
    length: 32
    format: SB
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 99
      funct3: 4
  - mnemonic: bge
    length: 32
    format: SB
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 99
      funct3: 5
  - mnemonic: bltu
    length: 32
    format: SB
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 99
      funct3: 6
  - mnemonic: bgeu
    length: 32
    format: SB
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 99
      funct3: 7
  - mnemonic: lb
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 3
      funct3: 0
  - mnemonic: lh
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 3
      funct3: 1
  - mnemonic: lw
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 3
      funct3: 2
  - mnemonic: lbu
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 3
      funct3: 4
  - mnemonic: lhu
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 3
      funct3: 5
  - mnemonic: sb
    length: 32
    format: S
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 35
      funct3: 0
  - mnemonic: sh
    length: 32
    format: S
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 35
      funct3: 1
  - mnemonic: sw
    length: 32
    format: S
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 35
      funct3: 2
  - mnemonic: addi
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 19
      funct3: 0
  - mnemonic: slti
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 19
      funct3: 2
  - mnemonic: sltiu
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 19
      funct3: 3
  - mnemonic: xori
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 19
      funct3: 4
  - mnemonic: ori
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 19
      funct3: 6
  - mnemonic: andi
    length: 32
    format: I
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 19
      funct3: 7
  - mnemonic: slli
    length: 32
    format: R
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 19
      funct3: 1
      funct7: 0
  - mnemonic: srli
    length: 32
    format: R
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 19
      funct3: 5
      funct7: 0
  - mnemonic: srai
    length: 32
    format: R
    operand length:
      - 0
      - 0
      - 12
    key:
      opcode: 19
      funct3: 5
      funct7: 32
  - mnemonic: add
    length: 32
    format: R
    key:
      opcode: 51
      funct3: 0
      funct7: 0
  - mnemonic: sub
    length: 32
    format: R
    key:
      opcode: 51
      funct3: 0
      funct7: 32
  - mnemonic: sll
    length: 32
    format: R
    key:
      opcode: 51
      funct3: 1
      funct7: 0
  - mnemonic: slt
    length: 32
    format: R
    key:
      opcode: 51
      funct3: 2
      funct7: 0
  - mnemonic: sltu
    length: 32
    format: R
    key:
      opcode: 51
      funct3: 3
      funct7: 0
  - mnemonic: xor
    length: 32
    format: R
    key:
      opcode: 51
      funct3: 4
      funct7: 0
  - mnemonic: srl
    length: 32
    format: R
    key:
      opcode: 51
      funct3: 5
      funct7: 0
  - mnemonic: sra
    length: 32
    format: R
    key:
      opcode: 51
      funct3: 5
      funct7: 32
  - mnemonic: or
    length: 32
    format: R
    key:
      opcode: 51
      funct3: 6
      funct7: 0
  - mnemonic: and
    length: 32
    format: R
    key:
      opcode: 51
      funct3: 0
      funct7: 7

# To explain the complex mechanism of calculating an address:
# We got the problem that every immediate except auipc and lui is signed,
# no exceptions. This means, calling for example li r1 2048 should actually
# cause a compile error if you stick to the RISC-V spec, version 2.1 where
# just the lower 12 bits are taken as an immediate.
# To work around this problem, we do the following
# (let imm be the immediate that was put in by the user):
# * if the lower 12 bits (viewed unsigned) are less than 2048 (i.e. imm[11]
#   is zero), we put imm[12:31] into our lui instruction and imm[0:11] into
#   our addi instruction. And imm[0:11] is guaranteed less than 2048, so we
#   can simply take imm[0:10].
# * if this is not the case, we take imm[12:31] and increment it. Now, we
#   calculate the difference: imm - (imm[12:31] + 2^12) = imm[0:11] - 2^12
#   = 2^11 + imm[0:10] - 2^12 = imm[0:10] - 2^11 = imm[0:10] - 2048. As
#   imm[0:10] is at least 0 and at max 2047, we have -2048 as the minimum
#   value which just turns out to still be in our 12 bit range.
# Summing it up:
# We take imm[12:31] + imm[11]. Now we still have to handle the corner case
# that imm[12:31] is the max value that can be stored in these bytes, in this
# case imm[12:31] + imm[11] has to be zero. So we take
#
# (imm[12:31] + imm[11]) & (2^20 - 1)
#
# For the lower 12 bits, we simply do
#
# imm[0:10] - imm[11] * 2048
#

builtin-macros:
  - |
    .macro la, rd, symbol
    auipc \rd, (((\symbol) >> 12) + (((\symbol) >> 11) & 1)) & ((1 << 20) - 1)
    addi \rd, \rd, ((\symbol) & ((1 << 11) - 1)) - ((\symbol) & (1 << 11))
    .endm
  - |
    .macro lbg, rd, symbol
    auipc \rd, (((\symbol) >> 12) + (((\symbol) >> 11) & 1)) & ((1 << 20) - 1)
    lb \rd, \rd, ((\symbol) & ((1 << 11) - 1)) - ((\symbol) & (1 << 11))
    .endm
  - |
    .macro lhg, rd, symbol
    auipc \rd, (((\symbol) >> 12) + (((\symbol) >> 11) & 1)) & ((1 << 20) - 1)
    lh \rd, \rd, ((\symbol) & ((1 << 11) - 1)) - ((\symbol) & (1 << 11))
    .endm
  - |
    .macro lwg, rd, symbol
    auipc \rd, (((\symbol) >> 12) + (((\symbol) >> 11) & 1)) & ((1 << 20) - 1)
    lw \rd, \rd, ((\symbol) & ((1 << 11) - 1)) - ((\symbol) & (1 << 11))
    .endm
  - |
    .macro sbg, rd, symbol, rt
    auipc \rt, (((\symbol) >> 12) + (((\symbol) >> 11) & 1)) & ((1 << 20) - 1)
    sb \rt, \rd, ((\symbol) & ((1 << 11) - 1)) - ((\symbol) & (1 << 11))
    .endm
  - |
    .macro shg, rd, symbol, rt
    auipc \rt, (((\symbol) >> 12) + (((\symbol) >> 11) & 1)) & ((1 << 20) - 1)
    sh \rt, \rd, ((\symbol) & ((1 << 11) - 1)) - ((\symbol) & (1 << 11))
    .endm
  - |
    .macro swg, rd, symbol, rt
    auipc \rt, (((\symbol) >> 12) + (((\symbol) >> 11) & 1)) & ((1 << 20) - 1)
    sw \rt, \rd, ((\symbol) & ((1 << 11) - 1)) - ((\symbol) & (1 << 11))
    .endm
  - |
    .macro nop
    addi x0, x0, 0
    .endm
  - |
    .macro li, rd, imm
    lui \rd, (((\imm) >> 12) + (((\imm) >> 11) & 1)) & ((1 << 20) - 1)
    addi \rd, \rd, ((\imm) & ((1 << 11) - 1)) - ((\imm) & (1 << 11))
    .endm
  - |
    .macro mv, rd, rs
    addi \rd, \rs, 0
    .endm
  - |
    .macro not, rd, rs
    xori \rd, \rs, -1
    .endm
  - |
    .macro neg, rd, rs
    sub \rd, x0, \rs
    .endm
  - |
    .macro seqz, rd, rs
    sltiu \rd, \rs, 1
    .endm
  - |
   .macro snez, rd, rs
    sltu \rd, x0, \rs
    .endm
  - |
    .macro sltz, rd, rs
    slt \rd, \rs, x0
    .endm
  - |
    .macro sgtz, rd, rs
    slt \rd, x0, \rs
    .endm
  - |
    .macro beqz, rs, offset
    beq \rs, x0, \offset
    .endm
  - |
    .macro bnez, rs, offset
    bne \rs, x0, \offset
    .endm
  - |
    .macro blez, rs, offset
    bge x0, \rs, \offset
    .endm
  - |
    .macro bgez, rs, offset
    bge \rs, x0, \offset
    .endm
  - |
    .macro bltz, rs, offset
    blt \rs, x0, \offset
    .endm
  - |
    .macro bgtz, rs, offset
    blt x0, \rs, \offset
    .endm
  - |
    .macro j, offset
    jal x0, \offset
    .endm
  - |
    .macro jal, offset
    jal x1, \offset
    .endm
  - |
    .macro jr, rs
    jalr x0, \rs, 0
    .endm
  - |
    .macro jalr, rs
    jalr x1, \rs, 0
    .endm
  - |
    .macro ret
    jalr x0, x1, 0
    .endm
  - |
    .macro call, offset
    auipc x6, (((\offset) >> 12) + (((\offset) >> 11) & 1)) & ((1 << 20) - 1)
    jalr x1, x6, ((\offset) & ((1 << 11) - 1)) - ((\offset) & (1 << 11))
    .endm
  - |
    .macro tail, offset
    auipc x6, (((\offset) >> 12) + (((\offset) >> 11) & 1)) & ((1 << 20) - 1)
    jalr x0, x6, ((\offset) & ((1 << 11) - 1)) - ((\offset) & (1 << 11))
    .endm
units:
  - name: cpu
    registers:
      - name: x0
        id: 0
        alias: zero
        size: 32
        constant: "0x0"
      - name: x1
        id: 1
        size: 32
      - name: x2
        id: 2
        size: 32
      - name: x3
        id: 3
        size: 32
      - name: x4
        id: 4
        size: 32
      - name: x5
        id: 5
        size: 32
      - name: x6
        id: 6
        size: 32
      - name: x7
        id: 7
        size: 32
      - name: x8
        id: 8
        size: 32
      - name: x9
        id: 9
        size: 32
      - name: x10
        id: 10
        size: 32
      - name: x11
        id: 11
        size: 32
      - name: x12
        id: 12
        size: 32
      - name: x13
        id: 13
        size: 32
      - name: x14
        id: 14
        size: 32
      - name: x15
        id: 15
        size: 32
      - name: x16
        id: 16
        size: 32
      - name: x17
        id: 17
        size: 32
      - name: x18
        id: 18
        size: 32
      - name: x19
        id: 19
        size: 32
      - name: x20
        id: 20
        size: 32
      - name: x21
        id: 21
        size: 32
      - name: x22
        id: 22
        size: 32
      - name: x23
        id: 23
        size: 32
      - name: x24
        id: 24
        size: 32
      - name: x25
        id: 25
        size: 32
      - name: x26
        id: 26
        size: 32
      - name: x27
        id: 27
        size: 32
      - name: x28
        id: 28
        size: 32
      - name: x29
        id: 29
        size: 32
      - name: x30
        id: 30
        size: 32
      - name: x31
        id: 31
        size: 32
      - name: pc
        id: 32
        size: 32
        type: program-counter
