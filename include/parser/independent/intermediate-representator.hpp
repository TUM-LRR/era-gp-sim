/* C++ Assembler Interpreter
 * Copyright (C) 2016 Chair of Computer Architecture
 * at Technical University of Munich
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef ERAGPSIM_PARSER_INDEPENDENT_INTERMEDIATE_REPRESENTATOR_HPP
#define ERAGPSIM_PARSER_INDEPENDENT_INTERMEDIATE_REPRESENTATOR_HPP

#include <functional>
#include <memory>
#include <string>
#include <vector>
#include "parser/common/final-command.hpp"
#include "parser/common/final-command.hpp"
#include "parser/common/final-representation.hpp"
#include "parser/common/macro-information.hpp"
#include "parser/independent/intermediate-operation.hpp"

class SyntaxTreeGenerator;
class Architecture;
class TransformationParameters;
class CompileErrorList;

/**
 * Provides methods for collecting and compiling a command list.
 */
class IntermediateRepresentator {
 public:
  /**
   * Instantiates an IntermediateRepresentator with the default values.
   */
  IntermediateRepresentator();

  /**
   * Inserts the given command into the command list.
   * \param command The given command.
   * \param errors The compile error list to save any possible errors.
   * \tparam T The command type.
   */
  template <typename T>
  void insertCommand(T&& command, CompileErrorList& errors) {
    // First of all, we create our dear pointer.
    IntermediateOperationPointer pointer = std::make_shared<T>(command);

    insertCommandPointer(pointer, errors);
  }

  /**
   * Inserts the given command into the command list.
   * \param command The given command.
   * \param errors The compile error list to save any possible errors.
   */
  void insertCommandPointer(const IntermediateOperationPointer& command,
                            CompileErrorList& errors);

  /**
   * Transforms the commands to a syntax tree list.
   * \param parameters Some constant parameters which are helpful.
   * \param parsingErrors The compile error list to report errors (will be
   * cloned, the inputted list will not be modified).
   * \param memoryAccess The access to write into the memory.
   * \return The list of syntax trees (and some other meta information) to be
   * interpreted by the architecture.
   */
  FinalRepresentation transform(const TransformationParameters& parameters,
                                const CompileErrorList& parsingErrors,
                                MemoryAccess& memoryAccess);

 private:
  /**
   * Inserts an operation into the list.
   * \param pointer The operation to insert, as pointer.
   */
  void internalInsertCommand(const IntermediateOperationPointer& pointer);

  /**
   * Generates information of the macros used in the program.
   * \return The vector of macro information which has been generated by this
   * operation.
   */
  MacroInformationVector generateMacroInformation();

  /**
   * The internal command list.
   */
  IntermediateOperationVector _commandList;

  /**
   * The current target for operations.
   */
  IntermediateOperationPointer _currentOutput;
};

#endif
